JS Back-End Retake Exam - Wizard Creatures Wiki
1. Exam Rules
1. You have 4 hours 
2. When you are ready, delete the node_modules folder, make sure all dependencies are listed in the package.json file, and submit your archiving project.
3. You are provided with HTML & CSS resources.
4. You may add attributes (such as class and dataset), but it is forbidden to change existing attributes (such as class and id).
5. You may change "href" attributes on links and add/change the method and action attributes of HTML forms.
6. Use Express.js as a back-end framework.
7. Use MongoDB as a database with mongoose.
8. You can use whatever view engine you like (express-handlebars, EJS, Pug, etc.).
9. Use bcrypt for hashing the password.
10. The application must start from the file index.js on port 3000.
11. It is forbidden to use React, Vue, Angular, etc.
12. Only the last submission will be evaluated!
2. Application Overview
Get acquainted with the provided HTML and CSS and create an application for creatures in wizard world. 
The visitors can view the home page and all posts page with available creatures. They can also register with an email, first name, last name and password. After registering, they will be able to create their posts and voted to other's posts they are interested in (if the current user is not the author of the post). Authors can edit or delete posts at any time.
3. Functional Requirements
Guest (Not Logged-in)
Guest navigation example:

The application should provide guest (not logged in) users with the functionality to home, all posts, login, register, and details page.
User (Logged-in)
User navigation example:

The application should provide users (logged-in) with the functionality to:
* view the home page and all other pages with logged-in navigation;
* view all posts page;
* create - new post [Create Post];
* access the creatures details page [Details];
* vote on a post (if the current user is not the owner of the post);
* delete or edit the post depending on the user's authentication (only for the owner of the current post).
4. Database Models
The database of the Wizard-Creatures-Wiki application needs to support two entities:
User
* firstName - string (required)
* lastName - string (required)
* email - string (required)
* password - string (required)
 Creature
* name - string (required)
* species - string (required)
* skinColor - string (required)
* eyeColor - string (required)
* image - string (required)
* description - string (required)
* votes - an array of objects containing the users' ID
* owner - object ID (a reference to the User model)
Note:  When a user votes for creatures, their ID is added to that collection (voted)
Implement the entities with the correct data types.
5. Application Pages (80 Pts)
Home Page (Logged-in Users and Logged-out Users) 
Visualize static home page: 
 
Register Page (Logged-out Users)
Register a user inside the database with a first name, last name, email, and password. The password inside the database must be hashed (use bcrypt) and both passwords must match! After successful registration, the user should log in automatically and be redirected to the home page. 

Login Page (Logged-out Users)
An already registered user can log in with the correct email and password. After a successful login, you should redirect the user to the home page.

Logout (Logged-in Users)
The logout action is available to logged-in users. Upon success, clear any session information and redirect the user to the home page.
All Posts (Logged-in Users and Logged-out Users)
List of all creature posts. Each post must display information about the creature's image, name, species, description, and a button for details about the specific creature. As in the picture below:

The [Details] button should be a link to the details page for the current creature post.
If there are NO creatures in the database yet, display "There are no posts yet...".

Details Page (Logged-in Users and Logged-out Users)
All users should be able to see details. Clicking the [Details] on the postcard should display the details page. If the currently registered user is the creator of the creature's post, the [Edit] and [Delete] buttons should be displayed. Otherwise, they should not be available. Information about the photo:
* name
* author
* species
* skin color
* eye color
* description
* image
* buttons (depending on the status of the currently logged in user)
* Votes for this post 
o Total rating of votes
o If there are people who voted, separate their�emails with comma and space ", "
o If not, display "No one has voted yet".
Details Page (Logged-out Users)
If the user hasn't logged in, no buttons should be displayed.
 
Details Page (Logged-in User and Creator of the Current Animal Post)
If the currently logged-in user is the owner (the user who created the creature post), they should see the [Delete] and [Edit] buttons.

Details Page (Logged-in User Who is Not the Current Post Owner)
If the currently logged-in user is not the owner (the creator of this post), he/she should see the vote button.

Vote (Logged-in User Who is Not the Current Post Owner)
Any registered user who is not the owner of the current post should be able to vote. 
When he or she click on [Vote], his/her user ID should be added to the "voted" collection the post and the user should be redirected to the details page for the current creature post.�
In the list- People who voted for the post, the emails of the people who voted must be displayed.
If a user has once voted on the post, he should see "Thanks For Voting" and in the list- People who voted for the post, his email should be displayed.
 
Add Creature (Logged-in User)
The create page is available to logged-in users. It contains a form for adding a new creature post. Upon success, redirect the user to the all-posts page.
 
Delete Creature (Logged-in User and Owner of the Current Post) 
Each creature post owner should be able to click on the [Delete] button and delete the current post from the database. After that, they should be redirected to the all-posts page.
Edit Creature (Logged-in User and Owner of the Current Post) 
Each user can edit their creature posts. Clicking the [Edit] button for a specific post on the details page should display the edit page, all fields being populated with the creature data. The page contains a form with input fields for all relevant properties. If successful, redirect the user to the current creature post details page.

6. Security Requirements / Routes Guards (10 Pts)
The security requirements are mainly access requirements, i.e., configurations specifying which users can access specific functionalities and pages.
* Guest (not logged-in) users can access the home page.
* Guest (not logged-in) users can access the login page and functionality.
* Guest (not logged-in) users can access the register page and functionality.
* Guest (not logged-in) and users (logged-in) can access the all posts (a list of all creature posts).
* Guest (not logged-in) can access the details page without functionality.
* Users (logged-in) can access the home page.
* Users (logged-in) can access the details page and functionality.
o Users (not creature post owners) can voted for post.
o Users (creature post owners) can edit and delete their creature posts.
* Users (logged-in) can access the profile page and functionality.
* Users (logged-in) can access the create post page and functionality.
* Users (logged-in) can access the logout functionality.
Use the following view for invalid paths:

7. Validation and Error Handling (10 Pts)
The application should notify the users about the result of their actions.
In case of an error, you should display a <div> with the class "error-container".
You can choose to display the first error or all of them. You have complete freedom to choose the content of the error message you will display.
Login / Register
You should make the following validations:
* The first name is required and should be at least 3 characters long.
* The last name is required and should be at least 3 characters long.
* The email is required and should be at least 10 characters long.
* The password is required and should be at least 4 characters long.
* The repeat password is required and should be equal to the password.
 
Animals
You should make the following validations while creating or editing an animal post:
* The name is required and should be at least 2 characters.
* The species is required and should be at least 3 characters.
* The creature image is required and should start with http:// or https://
* The skin color is required and should be at least 3 characters.
* The eye color is required and should be a at least 3 characters.
* The description is required and should be at least 5 and no longer than 500 characters.

8. * Bonus - Profile (10 Pts)
Each logged-in user should be able to view their profile information by clicking [Profile]. 
Each post must display information about the creature's image, name, species, author, rating of votes, and a button for details about the specific creature. As in the picture below:

 If there are no posts, display: 
9. Submitting Your Solution
Select all files and folders in your project folder. Exclude the node_modules folder. Compress the selected files and folders into a zipped archive folder. Upload the archive in the softuni learning system: https://softuni.bg/trainings/4111/js-back-end-may-2023#lesson-54980